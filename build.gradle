// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.2.2' apply false
    id 'com.android.library' version '7.2.2' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task genDict {
    outputs.file('app/dict.txt')
    doLast {
        def r = new Random()
        def start = r.nextInt(1000) + 0x0100
        def end = start + 0x4000 // 如果字典太大了，可以将start~end范围缩小
        def chars = (start..end)
                .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
                .collect { String.valueOf(Character.toChars(it)) }
        int max = chars.size()
        def startChars = []
        def dict = []
        // 筛选可用作java标识符开头的char
        for (int i = 0; i < max; i++) {
            char c = chars.get(i).charAt(0)
            if (Character.isJavaIdentifierStart(c)) {
                startChars << String.valueOf(c)
            }
        }
        def startSize = startChars.size()
        // 打乱顺序
        Collections.shuffle(chars, r)
        Collections.shuffle(startChars, r)
        // 拼两个char为一个词，让字典更丰富
        for (int i = 0; i < max; i++) {
            def m = r.nextInt(startSize - 3)
            def n = m + 3
            (m..n).each { j ->
                dict << (startChars.get(j) + chars.get(i))
            }
        }

        def f = outputs.files.getSingleFile()
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(startChars.join(System.lineSeparator()))
            it.write(dict.join(System.lineSeparator()))
        }
        println "Generated: $f"
    }
}